{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../play-dl/YouTube/utils/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { YouTubeVideo } from '../classes/Video';\nimport { YouTubePlayList } from '../classes/Playlist';\nimport { YouTubeChannel } from '../classes/Channel';\nimport { YouTube } from '..';\n\nexport interface ParseSearchInterface {\n    type?: 'video' | 'playlist' | 'channel';\n    limit?: number;\n}\n\nexport interface thumbnail {\n    width: string;\n    height: string;\n    url: string;\n}\n/**\n * Main command which converts html body data and returns the type of data requested.\n * @param html body of that request\n * @param options limit & type of YouTube search you want.\n * @returns Array of one of YouTube type.\n */\nexport function ParseSearchResult(html: string, options?: ParseSearchInterface): YouTube[] {\n    if (!html) throw new Error(\"Can't parse Search result without data\");\n    if (!options) options = { type: 'video', limit: 0 };\n    if (!options.type) options.type = 'video';\n\n    const data = html.split('var ytInitialData = ')[1].split('}};')[0] + '}}';\n    const json_data = JSON.parse(data);\n    const results = [];\n    const details =\n        json_data.contents.twoColumnSearchResultsRenderer.primaryContents.sectionListRenderer.contents[0]\n            .itemSectionRenderer.contents;\n    for (let i = 0; i < details.length; i++) {\n        if (typeof options.limit === 'number' && options.limit > 0 && results.length === options.limit) break;\n        if (!details[i].videoRenderer && !details[i].channelRenderer && !details[i].playlistRenderer) continue;\n        if (options.type === 'video') {\n            const parsed = parseVideo(details[i]);\n            if (!parsed) continue;\n            results.push(parsed);\n        } else if (options.type === 'channel') {\n            const parsed = parseChannel(details[i]);\n            if (!parsed) continue;\n            results.push(parsed);\n        } else if (options.type === 'playlist') {\n            const parsed = parsePlaylist(details[i]);\n            if (!parsed) continue;\n            results.push(parsed);\n        }\n    }\n    return results;\n}\n/**\n * Function to convert [hour : minutes : seconds] format to seconds\n * @param duration hour : minutes : seconds format\n * @returns seconds\n */\nfunction parseDuration(duration: string): number {\n    duration ??= '0:00';\n    const args = duration.split(':');\n    let dur = 0;\n\n    switch (args.length) {\n        case 3:\n            dur = parseInt(args[0]) * 60 * 60 + parseInt(args[1]) * 60 + parseInt(args[2]);\n            break;\n        case 2:\n            dur = parseInt(args[0]) * 60 + parseInt(args[1]);\n            break;\n        default:\n            dur = parseInt(args[0]);\n    }\n\n    return dur;\n}\n/**\n * Function to parse Channel searches\n * @param data body of that channel request.\n * @returns YouTubeChannel class\n */\nexport function parseChannel(data?: any): YouTubeChannel {\n    if (!data || !data.channelRenderer) throw new Error('Failed to Parse YouTube Channel');\n    const badge = data.channelRenderer.ownerBadges && data.channelRenderer.ownerBadges[0];\n    const url = `https://www.youtube.com${\n        data.channelRenderer.navigationEndpoint.browseEndpoint.canonicalBaseUrl ||\n        data.channelRenderer.navigationEndpoint.commandMetadata.webCommandMetadata.url\n    }`;\n    const res = new YouTubeChannel({\n        id: data.channelRenderer.channelId,\n        name: data.channelRenderer.title.simpleText,\n        icon: {\n            url: data.channelRenderer.thumbnail.thumbnails[\n                data.channelRenderer.thumbnail.thumbnails.length - 1\n            ].url.replace('//', 'https://'),\n            width: data.channelRenderer.thumbnail.thumbnails[data.channelRenderer.thumbnail.thumbnails.length - 1]\n                .width,\n            height: data.channelRenderer.thumbnail.thumbnails[data.channelRenderer.thumbnail.thumbnails.length - 1]\n                .height\n        },\n        url: url,\n        verified: Boolean(badge?.metadataBadgeRenderer?.style?.toLowerCase().includes('verified')),\n        artist: Boolean(badge?.metadataBadgeRenderer?.style?.toLowerCase().includes('artist')),\n        subscribers: data.channelRenderer.subscriberCountText?.simpleText\n            ? data.channelRenderer.subscriberCountText.simpleText\n            : '0 subscribers'\n    });\n\n    return res;\n}\n/**\n * Function to parse Video searches\n * @param data body of that video request.\n * @returns YouTubeVideo class\n */\nexport function parseVideo(data?: any): YouTubeVideo {\n    if (!data || !data.videoRenderer) throw new Error('Failed to Parse YouTube Video');\n\n    const badge = data.videoRenderer.ownerBadges && data.videoRenderer.ownerBadges[0];\n    const res = new YouTubeVideo({\n        id: data.videoRenderer.videoId,\n        url: `https://www.youtube.com/watch?v=${data.videoRenderer.videoId}`,\n        title: data.videoRenderer.title.runs[0].text,\n        description:\n            data.videoRenderer.detailedMetadataSnippets &&\n            data.videoRenderer.detailedMetadataSnippets[0].snippetText.runs[0]\n                ? data.videoRenderer.detailedMetadataSnippets[0].snippetText.runs.map((run: any) => run.text).join('')\n                : '',\n        duration: data.videoRenderer.lengthText ? parseDuration(data.videoRenderer.lengthText.simpleText) : 0,\n        duration_raw: data.videoRenderer.lengthText ? data.videoRenderer.lengthText.simpleText : null,\n        thumbnail: data.videoRenderer.thumbnail.thumbnails[data.videoRenderer.thumbnail.thumbnails.length - 1],\n        channel: {\n            id: data.videoRenderer.ownerText.runs[0].navigationEndpoint.browseEndpoint.browseId || null,\n            name: data.videoRenderer.ownerText.runs[0].text || null,\n            url: `https://www.youtube.com${\n                data.videoRenderer.ownerText.runs[0].navigationEndpoint.browseEndpoint.canonicalBaseUrl ||\n                data.videoRenderer.ownerText.runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url\n            }`,\n            icon: {\n                url: data.videoRenderer.channelThumbnailSupportedRenderers.channelThumbnailWithLinkRenderer.thumbnail\n                    .thumbnails[0].url,\n                width: data.videoRenderer.channelThumbnailSupportedRenderers.channelThumbnailWithLinkRenderer.thumbnail\n                    .thumbnails[0].width,\n                height: data.videoRenderer.channelThumbnailSupportedRenderers.channelThumbnailWithLinkRenderer.thumbnail\n                    .thumbnails[0].height\n            },\n            verified: Boolean(badge?.metadataBadgeRenderer?.style?.toLowerCase().includes('verified')),\n            artist: Boolean(badge?.metadataBadgeRenderer?.style?.toLowerCase().includes('artist'))\n        },\n        uploadedAt: data.videoRenderer.publishedTimeText?.simpleText ?? null,\n        views: data.videoRenderer.viewCountText?.simpleText?.replace(/[^0-9]/g, '') ?? 0,\n        live: data.videoRenderer.lengthText ? false : true\n    });\n\n    return res;\n}\n/**\n * Function to parse Playlist searches\n * @param data body of that playlist request.\n * @returns YouTubePlaylist class\n */\nexport function parsePlaylist(data?: any): YouTubePlayList {\n    if (!data || !data.playlistRenderer) throw new Error('Failed to Parse YouTube Playlist');\n\n    const res = new YouTubePlayList(\n        {\n            id: data.playlistRenderer.playlistId,\n            title: data.playlistRenderer.title.simpleText,\n            thumbnail: {\n                id: data.playlistRenderer.playlistId,\n                url: data.playlistRenderer.thumbnails[0].thumbnails[\n                    data.playlistRenderer.thumbnails[0].thumbnails.length - 1\n                ].url,\n                height: data.playlistRenderer.thumbnails[0].thumbnails[\n                    data.playlistRenderer.thumbnails[0].thumbnails.length - 1\n                ].height,\n                width: data.playlistRenderer.thumbnails[0].thumbnails[\n                    data.playlistRenderer.thumbnails[0].thumbnails.length - 1\n                ].width\n            },\n            channel: {\n                id: data.playlistRenderer.shortBylineText.runs?.[0].navigationEndpoint.browseEndpoint.browseId,\n                name: data.playlistRenderer.shortBylineText.runs?.[0].text,\n                url: `https://www.youtube.com${data.playlistRenderer.shortBylineText.runs?.[0].navigationEndpoint.commandMetadata.webCommandMetadata.url}`\n            },\n            videos: parseInt(data.playlistRenderer.videoCount.replace(/[^0-9]/g, ''))\n        },\n        true\n    );\n\n    return res;\n}\n"]}