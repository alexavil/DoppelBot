{"version":3,"file":"Playlist.js","sourceRoot":"","sources":["../../../play-dl/YouTube/classes/Playlist.ts"],"names":[],"mappings":"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","sourcesContent":["import { getPlaylistVideos, getContinuationToken } from '../utils/extractor';\nimport { request } from '../../Request';\nimport { YouTubeChannel } from './Channel';\nimport { YouTubeVideo } from './Video';\nconst BASE_API = 'https://www.youtube.com/youtubei/v1/browse?key=';\n/**\n * Class for YouTube Playlist url\n */\nexport class YouTubePlayList {\n    id?: string;\n    title?: string;\n    type: 'video' | 'playlist' | 'channel';\n    videoCount?: number;\n    lastUpdate?: string;\n    views?: number;\n    url?: string;\n    link?: string;\n    channel?: YouTubeChannel;\n    thumbnail?: {\n        id: string | undefined;\n        width: number | undefined;\n        height: number | undefined;\n        url: string | undefined;\n    };\n    private videos?: [];\n    private fetched_videos: Map<string, YouTubeVideo[]>;\n    private _continuation: {\n        api?: string;\n        token?: string;\n        clientVersion?: string;\n    } = {};\n    private __count: number;\n\n    constructor(data: any, searchResult = false) {\n        if (!data) throw new Error(`Cannot instantiate the ${this.constructor.name} class without data!`);\n        this.__count = 0;\n        this.fetched_videos = new Map();\n        this.type = 'playlist';\n        if (searchResult) this.__patchSearch(data);\n        else this.__patch(data);\n    }\n\n    private __patch(data: any) {\n        this.id = data.id || undefined;\n        this.url = data.url || undefined;\n        this.title = data.title || undefined;\n        this.videoCount = data.videoCount || 0;\n        this.lastUpdate = data.lastUpdate || undefined;\n        this.views = data.views || 0;\n        this.link = data.link || undefined;\n        this.channel = data.author || undefined;\n        this.thumbnail = data.thumbnail || undefined;\n        this.videos = data.videos || [];\n        this.__count++;\n        this.fetched_videos.set(`${this.__count}`, this.videos as YouTubeVideo[]);\n        this._continuation.api = data.continuation?.api ?? undefined;\n        this._continuation.token = data.continuation?.token ?? undefined;\n        this._continuation.clientVersion = data.continuation?.clientVersion ?? '<important data>';\n    }\n\n    private __patchSearch(data: any) {\n        this.id = data.id || undefined;\n        this.url = this.id ? `https://www.youtube.com/playlist?list=${this.id}` : undefined;\n        this.title = data.title || undefined;\n        this.thumbnail = data.thumbnail || undefined;\n        this.channel = data.channel || undefined;\n        this.videos = [];\n        this.videoCount = data.videos || 0;\n        this.link = undefined;\n        this.lastUpdate = undefined;\n        this.views = 0;\n    }\n\n    async next(limit = Infinity): Promise<YouTubeVideo[]> {\n        if (!this._continuation || !this._continuation.token) return [];\n\n        const nextPage = await request(`${BASE_API}${this._continuation.api}`, {\n            method: 'POST',\n            body: JSON.stringify({\n                continuation: this._continuation.token,\n                context: {\n                    client: {\n                        utcOffsetMinutes: 0,\n                        gl: 'US',\n                        hl: 'en',\n                        clientName: 'WEB',\n                        clientVersion: this._continuation.clientVersion\n                    },\n                    user: {},\n                    request: {}\n                }\n            })\n        });\n\n        const contents =\n            JSON.parse(nextPage)?.onResponseReceivedActions[0]?.appendContinuationItemsAction?.continuationItems;\n        if (!contents) return [];\n\n        const playlist_videos = getPlaylistVideos(contents, limit);\n        this.fetched_videos.set(`${this.__count}`, playlist_videos);\n        this._continuation.token = getContinuationToken(contents);\n        return playlist_videos;\n    }\n\n    async fetch(max = Infinity) {\n        const continuation = this._continuation.token;\n        if (!continuation) return this;\n        if (max < 1) max = Infinity;\n\n        while (typeof this._continuation.token === 'string' && this._continuation.token.length) {\n            if ((this.videos?.length as number) >= max) break;\n            this.__count++;\n            const res = await this.next();\n            if (!res.length) break;\n        }\n\n        return this;\n    }\n\n    page(number: number): YouTubeVideo[] {\n        if (!number) throw new Error('Page number is not provided');\n        if (!this.fetched_videos.has(`${number}`)) throw new Error('Given Page number is invalid');\n        return this.fetched_videos.get(`${number}`) as YouTubeVideo[];\n    }\n\n    get total_pages() {\n        return this.fetched_videos.size;\n    }\n\n    get total_videos() {\n        const page_number: number = this.total_pages;\n        return (page_number - 1) * 100 + (this.fetched_videos.get(`${page_number}`) as YouTubeVideo[]).length;\n    }\n\n    toJSON() {\n        return {\n            id: this.id,\n            title: this.title,\n            thumbnail: this.thumbnail,\n            channel: {\n                name: this.channel?.name,\n                id: this.channel?.id,\n                icon: this.channel?.iconURL()\n            },\n            url: this.url,\n            videos: this.videos\n        };\n    }\n}\n"]}