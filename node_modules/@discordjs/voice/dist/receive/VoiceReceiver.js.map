{"version":3,"file":"VoiceReceiver.js","sourceRoot":"","sources":["../../src/receive/VoiceReceiver.ts"],"names":[],"mappings":"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","sourcesContent":["import { VoiceOpcodes } from 'discord-api-types/voice/v4';\nimport { SILENCE_FRAME } from '../audio/AudioPlayer';\nimport { ConnectionData, Networking, NetworkingState } from '../networking/Networking';\nimport { VoiceUDPSocket } from '../networking/VoiceUDPSocket';\nimport { VoiceWebSocket } from '../networking/VoiceWebSocket';\nimport { methods } from '../util/Secretbox';\nimport type { VoiceConnection } from '../VoiceConnection';\nimport { AudioReceiveStream } from './AudioReceiveStream';\nimport { SSRCMap } from './SSRCMap';\n\n/**\n * Attaches to a VoiceConnection, allowing you to receive audio packets from other\n * users that are speaking.\n *\n * @beta\n */\nexport class VoiceReceiver {\n\t/**\n\t * The attached connection of this receiver.\n\t */\n\tpublic readonly voiceConnection;\n\n\t/**\n\t * Maps SSRCs to Discord user IDs.\n\t */\n\tpublic readonly ssrcMap: SSRCMap;\n\n\t/**\n\t * The current audio subscriptions of this receiver.\n\t */\n\tpublic readonly subscriptions: Map<number, AudioReceiveStream>;\n\n\t/**\n\t * The connection information for this receiver. Used to decrypt incoming packets.\n\t */\n\tprivate connectionData: Partial<ConnectionData>;\n\n\tpublic constructor(voiceConnection: VoiceConnection) {\n\t\tthis.voiceConnection = voiceConnection;\n\t\tthis.ssrcMap = new SSRCMap();\n\t\tthis.subscriptions = new Map();\n\t\tthis.connectionData = {};\n\n\t\tconst onWsPacket = (packet: any) => this.onWsPacket(packet);\n\t\tconst onUdpMessage = (msg: Buffer) => this.onUdpMessage(msg);\n\n\t\tconst applyConnectionData = (connectionData: Partial<ConnectionData>) => {\n\t\t\tthis.connectionData = {\n\t\t\t\t...this.connectionData,\n\t\t\t\t...connectionData,\n\t\t\t};\n\t\t\tif (connectionData.packetsPlayed === 0) {\n\t\t\t\tthis.voiceConnection.playOpusPacket(SILENCE_FRAME);\n\t\t\t}\n\t\t};\n\n\t\t// Bind listeners for updates\n\t\tconst onNetworkingChange = (oldState: NetworkingState, newState: NetworkingState) => {\n\t\t\tconst oldWs = Reflect.get(oldState, 'ws') as VoiceWebSocket | undefined;\n\t\t\tconst oldUdp = Reflect.get(oldState, 'udp') as VoiceUDPSocket | undefined;\n\t\t\tconst newWs = Reflect.get(newState, 'ws') as VoiceWebSocket | undefined;\n\t\t\tconst newUdp = Reflect.get(newState, 'udp') as VoiceUDPSocket | undefined;\n\n\t\t\tconst connectionData = Reflect.get(newState, 'connectionData') as Partial<ConnectionData> | undefined;\n\t\t\tif (connectionData) applyConnectionData(connectionData);\n\n\t\t\tif (newWs !== oldWs) {\n\t\t\t\toldWs?.off('packet', onWsPacket);\n\t\t\t\tnewWs?.on('packet', onWsPacket);\n\t\t\t}\n\n\t\t\tif (newUdp !== oldUdp) {\n\t\t\t\toldUdp?.off('message', onUdpMessage);\n\t\t\t\tnewUdp?.on('message', onUdpMessage);\n\t\t\t}\n\t\t};\n\n\t\tthis.voiceConnection.on('stateChange', (oldState, newState) => {\n\t\t\tconst oldNetworking: Networking | undefined = Reflect.get(oldState, 'networking');\n\t\t\tconst newNetworking: Networking | undefined = Reflect.get(newState, 'networking');\n\n\t\t\tif (newNetworking !== oldNetworking) {\n\t\t\t\toldNetworking?.off('stateChange', onNetworkingChange);\n\t\t\t\tnewNetworking?.on('stateChange', onNetworkingChange);\n\t\t\t\tif (newNetworking) {\n\t\t\t\t\tconst ws = Reflect.get(newNetworking.state, 'ws') as VoiceWebSocket | undefined;\n\t\t\t\t\tconst udp = Reflect.get(newNetworking.state, 'udp') as VoiceUDPSocket | undefined;\n\t\t\t\t\tconst connectionData = Reflect.get(newNetworking.state, 'connectionData') as\n\t\t\t\t\t\t| Partial<ConnectionData>\n\t\t\t\t\t\t| undefined;\n\t\t\t\t\tws?.on('packet', onWsPacket);\n\t\t\t\t\tudp?.on('message', onUdpMessage);\n\t\t\t\t\tif (connectionData) applyConnectionData(connectionData);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// Bind listeners for the existing state\n\t\tconst networking: Networking | undefined = Reflect.get(voiceConnection.state, 'networking');\n\t\tif (networking) {\n\t\t\tconst ws = Reflect.get(networking.state, 'ws') as VoiceWebSocket | undefined;\n\t\t\tconst udp = Reflect.get(networking.state, 'udp') as VoiceUDPSocket | undefined;\n\t\t\tconst connectionData = Reflect.get(networking.state, 'connectionData') as Partial<ConnectionData> | undefined;\n\t\t\tws?.on('packet', onWsPacket);\n\t\t\tudp?.on('message', onUdpMessage);\n\t\t\tif (connectionData) applyConnectionData(connectionData);\n\t\t}\n\t}\n\n\t/**\n\t * Called when a packet is received on the attached connection's WebSocket.\n\t *\n\t * @param packet The received packet\n\t */\n\tprivate onWsPacket(packet: any) {\n\t\tif (packet.op === VoiceOpcodes.ClientDisconnect && typeof packet.d?.user_id === 'string') {\n\t\t\tthis.ssrcMap.delete(packet.d.user_id);\n\t\t} else if (\n\t\t\tpacket.op === VoiceOpcodes.Speaking &&\n\t\t\ttypeof packet.d?.user_id === 'string' &&\n\t\t\ttypeof packet.d?.ssrc === 'number'\n\t\t) {\n\t\t\tthis.ssrcMap.update({ userId: packet.d.user_id, audioSSRC: packet.d.ssrc });\n\t\t} else if (\n\t\t\tpacket.op === VoiceOpcodes.ClientConnect &&\n\t\t\ttypeof packet.d?.user_id === 'string' &&\n\t\t\ttypeof packet.d?.audio_ssrc === 'number'\n\t\t) {\n\t\t\tthis.ssrcMap.update({\n\t\t\t\tuserId: packet.d.user_id,\n\t\t\t\taudioSSRC: packet.d.audio_ssrc,\n\t\t\t\tvideoSSRC: packet.d.video_ssrc === 0 ? undefined : packet.d.video_ssrc,\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate decrypt(buffer: Buffer, mode: string, nonce: Buffer, secretKey: Uint8Array) {\n\t\t// Choose correct nonce depending on encryption\n\t\tlet end;\n\t\tif (mode === 'xsalsa20_poly1305_lite') {\n\t\t\tbuffer.copy(nonce, 0, buffer.length - 4);\n\t\t\tend = buffer.length - 4;\n\t\t} else if (mode === 'xsalsa20_poly1305_suffix') {\n\t\t\tbuffer.copy(nonce, 0, buffer.length - 24);\n\t\t\tend = buffer.length - 24;\n\t\t} else {\n\t\t\tbuffer.copy(nonce, 0, 0, 12);\n\t\t}\n\n\t\t// Open packet\n\t\tconst decrypted = methods.open(buffer.slice(12, end), nonce, secretKey);\n\t\tif (!decrypted) return;\n\t\treturn Buffer.from(decrypted);\n\t}\n\n\t/**\n\t * Parses an audio packet, decrypting it to yield an Opus packet.\n\t *\n\t * @param buffer The buffer to parse\n\t * @param mode The encryption mode\n\t * @param nonce The nonce buffer used by the connection for encryption\n\t * @param secretKey The secret key used by the connection for encryption\n\t * @returns The parsed Opus packet\n\t */\n\tprivate parsePacket(buffer: Buffer, mode: string, nonce: Buffer, secretKey: Uint8Array) {\n\t\tlet packet = this.decrypt(buffer, mode, nonce, secretKey);\n\t\tif (!packet) return;\n\n\t\t// Strip RTP Header Extensions (one-byte only)\n\t\tif (packet[0] === 0xbe && packet[1] === 0xde && packet.length > 4) {\n\t\t\tconst headerExtensionLength = packet.readUInt16BE(2);\n\t\t\tlet offset = 4;\n\t\t\tfor (let i = 0; i < headerExtensionLength; i++) {\n\t\t\t\tconst byte = packet[offset];\n\t\t\t\toffset++;\n\t\t\t\tif (byte === 0) continue;\n\t\t\t\toffset += 1 + (byte >> 4);\n\t\t\t}\n\t\t\t// Skip over undocumented Discord byte (if present)\n\t\t\tconst byte = packet.readUInt8(offset);\n\t\t\tif (byte === 0x00 || byte === 0x02) offset++;\n\n\t\t\tpacket = packet.slice(offset);\n\t\t}\n\n\t\treturn packet;\n\t}\n\n\t/**\n\t * Called when the UDP socket of the attached connection receives a message.\n\t *\n\t * @param msg The received message\n\t */\n\tprivate onUdpMessage(msg: Buffer) {\n\t\tif (msg.length <= 8) return;\n\t\tconst ssrc = msg.readUInt32BE(8);\n\t\tconst stream = this.subscriptions.get(ssrc);\n\t\tif (!stream) return;\n\n\t\tconst userData = this.ssrcMap.get(ssrc);\n\t\tif (!userData) return;\n\n\t\tif (this.connectionData.encryptionMode && this.connectionData.nonceBuffer && this.connectionData.secretKey) {\n\t\t\tconst packet = this.parsePacket(\n\t\t\t\tmsg,\n\t\t\t\tthis.connectionData.encryptionMode,\n\t\t\t\tthis.connectionData.nonceBuffer,\n\t\t\t\tthis.connectionData.secretKey,\n\t\t\t);\n\t\t\tif (packet) {\n\t\t\t\tstream.push(packet);\n\t\t\t} else {\n\t\t\t\tstream.destroy(new Error('Failed to parse packet'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates a subscription for the given target, specified either by their SSRC or user ID.\n\t *\n\t * @param target The audio SSRC or user ID to subscribe to\n\t * @returns A readable stream of Opus packets received from the target\n\t */\n\tpublic subscribe(target: string | number) {\n\t\tconst ssrc = this.ssrcMap.get(target)?.audioSSRC;\n\t\tif (!ssrc) {\n\t\t\tthrow new Error(`No known SSRC for ${target}`);\n\t\t}\n\n\t\tconst existing = this.subscriptions.get(ssrc);\n\t\tif (existing) return existing;\n\n\t\tconst stream = new AudioReceiveStream();\n\t\tstream.once('close', () => this.subscriptions.delete(ssrc));\n\t\tthis.subscriptions.set(ssrc, stream);\n\t\treturn stream;\n\t}\n}\n\n/**\n * Creates a new voice receiver for the given voice connection.\n *\n * @param voiceConnection The voice connection to attach to\n * @beta\n * @remarks\n * Voice receive is an undocumented part of the Discord API - voice receive is not guaranteed\n * to be stable and may break without notice.\n */\nexport function createVoiceReceiver(voiceConnection: VoiceConnection) {\n\treturn new VoiceReceiver(voiceConnection);\n}\n"]}