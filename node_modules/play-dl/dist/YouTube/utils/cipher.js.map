{"version":3,"file":"cipher.js","sourceRoot":"","sources":["../../../play-dl/YouTube/utils/cipher.ts"],"names":[],"mappings":"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","sourcesContent":["import { URL, URLSearchParams } from 'node:url';\nimport { request } from './../../Request';\n\ninterface formatOptions {\n    url?: string;\n    sp?: string;\n    signatureCipher?: string;\n    cipher?: string;\n    s?: string;\n}\n// RegExp for various js functions\nconst var_js = '[a-zA-Z_\\\\$][a-zA-Z_0-9]*';\nconst singlequote_js = `'[^'\\\\\\\\]*(:?\\\\\\\\[\\\\s\\\\S][^'\\\\\\\\]*)*'`;\nconst duoblequote_js = `\"[^\"\\\\\\\\]*(:?\\\\\\\\[\\\\s\\\\S][^\"\\\\\\\\]*)*\"`;\nconst quote_js = `(?:${singlequote_js}|${duoblequote_js})`;\nconst key_js = `(?:${var_js}|${quote_js})`;\nconst prop_js = `(?:\\\\.${var_js}|\\\\[${quote_js}\\\\])`;\nconst empty_js = `(?:''|\"\")`;\nconst reverse_function = ':function\\\\(a\\\\)\\\\{' + '(?:return )?a\\\\.reverse\\\\(\\\\)' + '\\\\}';\nconst slice_function = ':function\\\\(a,b\\\\)\\\\{' + 'return a\\\\.slice\\\\(b\\\\)' + '\\\\}';\nconst splice_function = ':function\\\\(a,b\\\\)\\\\{' + 'a\\\\.splice\\\\(0,b\\\\)' + '\\\\}';\nconst swap_function =\n    ':function\\\\(a,b\\\\)\\\\{' +\n    'var c=a\\\\[0\\\\];a\\\\[0\\\\]=a\\\\[b(?:%a\\\\.length)?\\\\];a\\\\[b(?:%a\\\\.length)?\\\\]=c(?:;return a)?' +\n    '\\\\}';\nconst obj_regexp = new RegExp(\n    `var (${var_js})=\\\\{((?:(?:${key_js}${reverse_function}|${key_js}${slice_function}|${key_js}${splice_function}|${key_js}${swap_function}),?\\\\r?\\\\n?)+)\\\\};`\n);\nconst function_regexp = new RegExp(\n    `${\n        `function(?: ${var_js})?\\\\(a\\\\)\\\\{` + `a=a\\\\.split\\\\(${empty_js}\\\\);\\\\s*` + `((?:(?:a=)?${var_js}`\n    }${prop_js}\\\\(a,\\\\d+\\\\);)+)` +\n        `return a\\\\.join\\\\(${empty_js}\\\\)` +\n        `\\\\}`\n);\nconst reverse_regexp = new RegExp(`(?:^|,)(${key_js})${reverse_function}`, 'm');\nconst slice_regexp = new RegExp(`(?:^|,)(${key_js})${slice_function}`, 'm');\nconst splice_regexp = new RegExp(`(?:^|,)(${key_js})${splice_function}`, 'm');\nconst swap_regexp = new RegExp(`(?:^|,)(${key_js})${swap_function}`, 'm');\n/**\n * Function to get tokens from html5player body data.\n * @param body body data of html5player.\n * @returns Array of tokens.\n */\nfunction js_tokens(body: string) {\n    const function_action = function_regexp.exec(body);\n    const object_action = obj_regexp.exec(body);\n    if (!function_action || !object_action) return null;\n\n    const object = object_action[1].replace(/\\$/g, '\\\\$');\n    const object_body = object_action[2].replace(/\\$/g, '\\\\$');\n    const function_body = function_action[1].replace(/\\$/g, '\\\\$');\n\n    let result = reverse_regexp.exec(object_body);\n    const reverseKey = result && result[1].replace(/\\$/g, '\\\\$').replace(/\\$|^'|^\"|'$|\"$/g, '');\n\n    result = slice_regexp.exec(object_body);\n    const sliceKey = result && result[1].replace(/\\$/g, '\\\\$').replace(/\\$|^'|^\"|'$|\"$/g, '');\n\n    result = splice_regexp.exec(object_body);\n    const spliceKey = result && result[1].replace(/\\$/g, '\\\\$').replace(/\\$|^'|^\"|'$|\"$/g, '');\n\n    result = swap_regexp.exec(object_body);\n    const swapKey = result && result[1].replace(/\\$/g, '\\\\$').replace(/\\$|^'|^\"|'$|\"$/g, '');\n\n    const keys = `(${[reverseKey, sliceKey, spliceKey, swapKey].join('|')})`;\n    const myreg = `(?:a=)?${object}(?:\\\\.${keys}|\\\\['${keys}'\\\\]|\\\\[\"${keys}\"\\\\])` + `\\\\(a,(\\\\d+)\\\\)`;\n    const tokenizeRegexp = new RegExp(myreg, 'g');\n    const tokens = [];\n    while ((result = tokenizeRegexp.exec(function_body)) !== null) {\n        const key = result[1] || result[2] || result[3];\n        switch (key) {\n            case swapKey:\n                tokens.push(`sw${result[4]}`);\n                break;\n            case reverseKey:\n                tokens.push('rv');\n                break;\n            case sliceKey:\n                tokens.push(`sl${result[4]}`);\n                break;\n            case spliceKey:\n                tokens.push(`sp${result[4]}`);\n                break;\n        }\n    }\n    return tokens;\n}\n/**\n * Function to decipher signature\n * @param tokens Tokens from js_tokens function\n * @param signature Signatured format url\n * @returns deciphered signature\n */\nfunction deciper_signature(tokens: string[], signature: string) {\n    let sig = signature.split('');\n    const len = tokens.length;\n    for (let i = 0; i < len; i++) {\n        let token = tokens[i],\n            pos;\n        switch (token.slice(0, 2)) {\n            case 'sw':\n                pos = parseInt(token.slice(2));\n                sig = swappositions(sig, pos);\n                break;\n            case 'rv':\n                sig.reverse();\n                break;\n            case 'sl':\n                pos = parseInt(token.slice(2));\n                sig = sig.slice(pos);\n                break;\n            case 'sp':\n                pos = parseInt(token.slice(2));\n                sig.splice(0, pos);\n                break;\n        }\n    }\n    return sig.join('');\n}\n/**\n * Function to swap positions in a array\n * @param array array\n * @param position position to switch with first element\n * @returns new array with swapped positions.\n */\nfunction swappositions(array: string[], position: number) {\n    const first = array[0];\n    array[0] = array[position];\n    array[position] = first;\n    return array;\n}\n/**\n * Sets Download url with some extra parameter\n * @param format video fomat\n * @param sig deciphered signature\n * @returns void\n */\nfunction download_url(format: formatOptions, sig: string) {\n    if (!format.url) return;\n\n    const decoded_url = decodeURIComponent(format.url);\n\n    const parsed_url = new URL(decoded_url);\n    parsed_url.searchParams.set('ratebypass', 'yes');\n\n    if (sig) {\n        parsed_url.searchParams.set(format.sp || 'signature', sig);\n    }\n    format.url = parsed_url.toString();\n}\n/**\n * Main function which handles all queries related to video format deciphering\n * @param formats video formats\n * @param html5player url of html5player\n * @returns array of format.\n */\nexport async function format_decipher(formats: formatOptions[], html5player: string): Promise<formatOptions[]> {\n    const body = await request(html5player);\n    const tokens = js_tokens(body);\n    formats.forEach((format) => {\n        const cipher = format.signatureCipher || format.cipher;\n        if (cipher) {\n            const params = Object.fromEntries(new URLSearchParams(cipher));\n            Object.assign(format, params);\n            delete format.signatureCipher;\n            delete format.cipher;\n        }\n        if (tokens && format.s) {\n            const sig = deciper_signature(tokens, format.s);\n            download_url(format, sig);\n            delete format.s;\n            delete format.sp;\n        }\n    });\n    return formats;\n}\n"]}