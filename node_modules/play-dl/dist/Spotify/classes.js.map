{"version":3,"file":"classes.js","sourceRoot":"","sources":["../../play-dl/Spotify/classes.ts"],"names":[],"mappings":"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","sourcesContent":["import { request } from '../Request';\nimport { SpotifyDataOptions } from '.';\n\ninterface SpotifyTrackAlbum {\n    name: string;\n    url: string;\n    id: string;\n    release_date: string;\n    release_date_precision: string;\n    total_tracks: number;\n}\n\ninterface SpotifyArtists {\n    name: string;\n    url: string;\n    id: string;\n}\n\ninterface SpotifyThumbnail {\n    height: number;\n    width: number;\n    url: string;\n}\n\ninterface SpotifyCopyright {\n    text: string;\n    type: string;\n}\n/**\n * Class for Spotify Track\n */\nexport class SpotifyTrack {\n    name: string;\n    type: 'track' | 'playlist' | 'album';\n    id: string;\n    url: string;\n    explicit: boolean;\n    durationInSec: number;\n    durationInMs: number;\n    artists: SpotifyArtists[];\n    album: SpotifyTrackAlbum | undefined;\n    thumbnail: SpotifyThumbnail | undefined;\n    constructor(data: any) {\n        this.name = data.name;\n        this.id = data.id;\n        this.type = 'track';\n        this.url = data.external_urls.spotify;\n        this.explicit = data.explicit;\n        this.durationInMs = data.duration_ms;\n        this.durationInSec = Math.round(this.durationInMs / 1000);\n        const artists: SpotifyArtists[] = [];\n        data.artists.forEach((v: any) => {\n            artists.push({\n                name: v.name,\n                id: v.id,\n                url: v.external_urls.spotify\n            });\n        });\n        this.artists = artists;\n        if (!data.album?.name) this.album = undefined;\n        else {\n            this.album = {\n                name: data.album.name,\n                url: data.external_urls.spotify,\n                id: data.album.id,\n                release_date: data.album.release_date,\n                release_date_precision: data.album.release_date_precision,\n                total_tracks: data.album.total_tracks\n            };\n        }\n        if (!data.album?.images?.[0]) this.thumbnail = undefined;\n        else this.thumbnail = data.album.images[0];\n    }\n\n    toJSON() {\n        return {\n            name: this.name,\n            id: this.id,\n            type: this.type,\n            url: this.url,\n            explicit: this.explicit,\n            durationInMs: this.durationInMs,\n            durationInSec: this.durationInSec,\n            artists: this.artists,\n            album: this.album,\n            thumbnail: this.thumbnail\n        };\n    }\n}\n/**\n * Class for Spotify Playlist\n */\nexport class SpotifyPlaylist {\n    name: string;\n    type: 'track' | 'playlist' | 'album';\n    collaborative: boolean;\n    description: string;\n    url: string;\n    id: string;\n    thumbnail: SpotifyThumbnail;\n    owner: SpotifyArtists;\n    tracksCount: number;\n    private spotifyData: SpotifyDataOptions;\n    private fetched_tracks: Map<string, SpotifyTrack[]>;\n    constructor(data: any, spotifyData: SpotifyDataOptions) {\n        this.name = data.name;\n        this.type = 'playlist';\n        this.collaborative = data.collaborative;\n        this.description = data.description;\n        this.url = data.external_urls.spotify;\n        this.id = data.id;\n        this.thumbnail = data.images[0];\n        this.owner = {\n            name: data.owner.display_name,\n            url: data.owner.external_urls.spotify,\n            id: data.owner.id\n        };\n        this.tracksCount = Number(data.tracks.total);\n        const videos: SpotifyTrack[] = [];\n        data.tracks.items.forEach((v: any) => {\n            videos.push(new SpotifyTrack(v.track));\n        });\n        this.fetched_tracks = new Map();\n        this.fetched_tracks.set('1', videos);\n        this.spotifyData = spotifyData;\n    }\n\n    async fetch() {\n        let fetching: number;\n        if (this.tracksCount > 1000) fetching = 1000;\n        else fetching = this.tracksCount;\n        if (fetching <= 100) return;\n        const work = [];\n        for (let i = 2; i <= Math.ceil(fetching / 100); i++) {\n            work.push(\n                new Promise(async (resolve, reject) => {\n                    const response = await request(\n                        `https://api.spotify.com/v1/playlists/${this.id}/tracks?offset=${\n                            (i - 1) * 100\n                        }&limit=100&market=${this.spotifyData.market}`,\n                        {\n                            headers: {\n                                Authorization: `${this.spotifyData.token_type} ${this.spotifyData.access_token}`\n                            }\n                        }\n                    ).catch((err) => reject(`Response Error : \\n${err}`));\n                    const videos: SpotifyTrack[] = [];\n                    if (typeof response !== 'string') return;\n                    const json_data = JSON.parse(response);\n                    json_data.items.forEach((v: any) => {\n                        if (v.track) videos.push(new SpotifyTrack(v.track));\n                    });\n                    this.fetched_tracks.set(`${i}`, videos);\n                    resolve('Success');\n                })\n            );\n        }\n        await Promise.allSettled(work);\n        return this;\n    }\n\n    page(num: number) {\n        if (!num) throw new Error('Page number is not provided');\n        if (!this.fetched_tracks.has(`${num}`)) throw new Error('Given Page number is invalid');\n        return this.fetched_tracks.get(`${num}`);\n    }\n\n    get total_pages() {\n        return this.fetched_tracks.size;\n    }\n\n    get total_tracks() {\n        const page_number: number = this.total_pages;\n        return (page_number - 1) * 100 + (this.fetched_tracks.get(`${page_number}`) as SpotifyTrack[]).length;\n    }\n\n    toJSON() {\n        return {\n            name: this.name,\n            type: this.type,\n            collaborative: this.collaborative,\n            description: this.description,\n            url: this.url,\n            id: this.id,\n            thumbnail: this.thumbnail,\n            owner: this.owner\n        };\n    }\n}\n/**\n * Class for Spotify Album\n */\nexport class SpotifyAlbum {\n    name: string;\n    type: 'track' | 'playlist' | 'album';\n    url: string;\n    id: string;\n    thumbnail: SpotifyThumbnail;\n    artists: SpotifyArtists[];\n    copyrights: SpotifyCopyright[];\n    release_date: string;\n    release_date_precision: string;\n    tracksCount: number;\n    private spotifyData: SpotifyDataOptions;\n    private fetched_tracks: Map<string, SpotifyTrack[]>;\n    constructor(data: any, spotifyData: SpotifyDataOptions) {\n        this.name = data.name;\n        this.type = 'album';\n        this.id = data.id;\n        this.url = data.external_urls.spotify;\n        this.thumbnail = data.images[0];\n        const artists: SpotifyArtists[] = [];\n        data.artists.forEach((v: any) => {\n            artists.push({\n                name: v.name,\n                id: v.id,\n                url: v.external_urls.spotify\n            });\n        });\n        this.artists = artists;\n        this.copyrights = data.copyrights;\n        this.release_date = data.release_date;\n        this.release_date_precision = data.release_date_precision;\n        this.tracksCount = data.total_tracks;\n        const videos: SpotifyTrack[] = [];\n        data.tracks.items.forEach((v: any) => {\n            videos.push(new SpotifyTrack(v));\n        });\n        this.fetched_tracks = new Map();\n        this.fetched_tracks.set('1', videos);\n        this.spotifyData = spotifyData;\n    }\n\n    async fetch() {\n        let fetching: number;\n        if (this.tracksCount > 500) fetching = 500;\n        else fetching = this.tracksCount;\n        if (fetching <= 50) return;\n        const work = [];\n        for (let i = 2; i <= Math.ceil(fetching / 50); i++) {\n            work.push(\n                new Promise(async (resolve, reject) => {\n                    const response = await request(\n                        `https://api.spotify.com/v1/albums/${this.id}/tracks?offset=${(i - 1) * 50}&limit=50&market=${\n                            this.spotifyData.market\n                        }`,\n                        {\n                            headers: {\n                                Authorization: `${this.spotifyData.token_type} ${this.spotifyData.access_token}`\n                            }\n                        }\n                    ).catch((err) => reject(`Response Error : \\n${err}`));\n                    const videos: SpotifyTrack[] = [];\n                    if (typeof response !== 'string') return;\n                    const json_data = JSON.parse(response);\n                    json_data.items.forEach((v: any) => {\n                        if (v) videos.push(new SpotifyTrack(v));\n                    });\n                    this.fetched_tracks.set(`${i}`, videos);\n                    resolve('Success');\n                })\n            );\n        }\n        await Promise.allSettled(work);\n        return this;\n    }\n\n    page(num: number) {\n        if (!num) throw new Error('Page number is not provided');\n        if (!this.fetched_tracks.has(`${num}`)) throw new Error('Given Page number is invalid');\n        return this.fetched_tracks.get(`${num}`);\n    }\n\n    get total_pages() {\n        return this.fetched_tracks.size;\n    }\n\n    get total_tracks() {\n        const page_number: number = this.total_pages;\n        return (page_number - 1) * 100 + (this.fetched_tracks.get(`${page_number}`) as SpotifyTrack[]).length;\n    }\n\n    toJSON() {\n        return {\n            name: this.name,\n            type: this.type,\n            url: this.url,\n            thumbnail: this.thumbnail,\n            artists: this.artists,\n            copyrights: this.copyrights,\n            release_date: this.release_date,\n            release_date_precision: this.release_date_precision,\n            total_tracks: this.total_tracks\n        };\n    }\n}\n"]}