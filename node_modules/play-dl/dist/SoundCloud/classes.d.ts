/// <reference types="node" />
import { Readable } from 'node:stream';
import { StreamType } from '../YouTube/stream';
interface SoundCloudUser {
    name: string;
    id: string;
    url: string;
    type: 'track' | 'playlist' | 'user';
    verified: boolean;
    description: string;
    first_name: string;
    full_name: string;
    last_name: string;
    thumbnail: string;
}
interface SoundCloudTrackDeprecated {
    fetched: boolean;
    id: number;
    type: 'track';
}
export interface SoundCloudTrackFormat {
    url: string;
    preset: string;
    duration: number;
    format: {
        protocol: string;
        mime_type: string;
    };
    quality: string;
}
/**
 * SoundCloud Track
 */
export declare class SoundCloudTrack {
    name: string;
    id: number;
    url: string;
    fetched: boolean;
    type: 'track' | 'playlist' | 'user';
    durationInSec: number;
    durationInMs: number;
    formats: SoundCloudTrackFormat[];
    publisher: {
        name: string;
        id: number;
        artist: string;
        contains_music: boolean;
        writer_composer: string;
    } | null;
    thumbnail: string;
    user: SoundCloudUser;
    constructor(data: any);
    toJSON(): {
        name: string;
        id: number;
        type: "playlist" | "track" | "user";
        url: string;
        fetched: boolean;
        durationInMs: number;
        durationInSec: number;
        publisher: {
            name: string;
            id: number;
            artist: string;
            contains_music: boolean;
            writer_composer: string;
        } | null;
        formats: SoundCloudTrackFormat[];
        thumbnail: string;
        user: SoundCloudUser;
    };
}
/**
 * SoundCloud Playlist
 */
export declare class SoundCloudPlaylist {
    name: string;
    id: number;
    url: string;
    type: 'track' | 'playlist' | 'user';
    sub_type: string;
    durationInSec: number;
    durationInMs: number;
    client_id: string;
    user: SoundCloudUser;
    tracks: SoundCloudTrack[] | SoundCloudTrackDeprecated[];
    tracksCount: number;
    constructor(data: any, client_id: string);
    fetch(): Promise<void>;
    get total_tracks(): number;
    toJSON(): {
        name: string;
        id: number;
        type: "playlist" | "track" | "user";
        sub_type: string;
        url: string;
        durationInMs: number;
        durationInSec: number;
        tracksCount: number;
        user: SoundCloudUser;
        tracks: SoundCloudTrack[] | SoundCloudTrackDeprecated[];
    };
}
/**
 * SoundCloud Stream class
 */
export declare class Stream {
    stream: Readable;
    type: StreamType;
    private url;
    private downloaded_time;
    private timer;
    private downloaded_segments;
    private request;
    private time;
    private segment_urls;
    constructor(url: string, type?: StreamType);
    private parser;
    private start;
    private loop;
    private cleanup;
    pause(): void;
    resume(): void;
}
export {};
//# sourceMappingURL=classes.d.ts.map