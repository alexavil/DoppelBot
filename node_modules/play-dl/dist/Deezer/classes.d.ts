interface DeezerImage {
    xl: string;
    big: string;
    medium: string;
    small: string;
}
interface DeezerGenre {
    name: string;
    picture: DeezerImage;
}
interface DeezerUser {
    id: number;
    name: string;
}
/**
 * Class for Deezer Tracks
 */
export declare class DeezerTrack {
    id: number;
    title: string;
    shortTitle: string;
    url: string;
    durationInSec: number;
    rank: number;
    explicit: boolean;
    previewURL: string;
    artist: DeezerArtist;
    album: DeezerTrackAlbum;
    type: 'track' | 'playlist' | 'album';
    /**
     * true for tracks in search results and false if the track was fetched directly.
     */
    partial: boolean;
    trackPosition?: number;
    diskNumber?: number;
    releaseDate?: Date;
    bpm?: number;
    gain?: number;
    contributors?: DeezerArtist[];
    constructor(data: any, partial: boolean);
    /**
     * Fetches the missing data for a partial {@link DeezerTrack}.
     */
    fetch(): Promise<DeezerTrack>;
    toJSON(): {
        id: number;
        title: string;
        shortTitle: string;
        url: string;
        durationInSec: number;
        rank: number;
        explicit: boolean;
        previewURL: string;
        artist: DeezerArtist;
        album: DeezerTrackAlbum;
        type: "playlist" | "track" | "album";
        trackPosition: number | undefined;
        diskNumber: number | undefined;
        releaseDate: Date | undefined;
        bpm: number | undefined;
        gain: number | undefined;
        contributors: DeezerArtist[] | undefined;
    };
}
/**
 * Class for Deezer Albums
 */
export declare class DeezerAlbum {
    id: number;
    title: string;
    url: string;
    recordType: string;
    explicit: boolean;
    artist: DeezerArtist;
    cover: DeezerImage;
    type: 'track' | 'playlist' | 'album';
    tracksCount: number;
    /**
     * true for albums in search results and false if the album was fetched directly.
     */
    partial: boolean;
    upc?: string;
    durationInSec?: number;
    numberOfFans?: number;
    releaseDate?: Date;
    available?: boolean;
    genres?: DeezerGenre[];
    contributors?: DeezerArtist[];
    tracks: DeezerTrack[];
    constructor(data: any, partial: boolean);
    /**
     * Fetches the missing data for a partial {@link DeezerAlbum}.
     */
    fetch(): Promise<DeezerAlbum>;
    toJSON(): {
        id: number;
        title: string;
        url: string;
        recordType: string;
        explicit: boolean;
        artist: DeezerArtist;
        cover: DeezerImage;
        type: "playlist" | "track" | "album";
        upc: string | undefined;
        tracksCount: number;
        durationInSec: number | undefined;
        numberOfFans: number | undefined;
        releaseDate: Date | undefined;
        available: boolean | undefined;
        genres: DeezerGenre[] | undefined;
        contributors: DeezerArtist[] | undefined;
        tracks: {
            id: number;
            title: string;
            shortTitle: string;
            url: string;
            durationInSec: number;
            rank: number;
            explicit: boolean;
            previewURL: string;
            artist: DeezerArtist;
            album: DeezerTrackAlbum;
            type: "playlist" | "track" | "album";
            trackPosition: number | undefined;
            diskNumber: number | undefined;
            releaseDate: Date | undefined;
            bpm: number | undefined;
            gain: number | undefined;
            contributors: DeezerArtist[] | undefined;
        }[];
    };
}
/**
 * Class for Deezer Albums
 */
export declare class DeezerPlaylist {
    id: number;
    title: string;
    public: boolean;
    url: string;
    picture: DeezerImage;
    creationDate: Date;
    type: 'track' | 'playlist' | 'album';
    creator: DeezerUser;
    tracksCount: number;
    partial: boolean;
    description?: string;
    durationInSec?: number;
    isLoved?: boolean;
    collaborative?: boolean;
    fans?: number;
    tracks: DeezerTrack[];
    constructor(data: any, partial: boolean);
    /**
     * Fetches the missing data for a partial {@link DeezerPlaylist} as well as fetching all tracks.
     * @returns The Deezer playlist object this method was called on.
     */
    fetch(): Promise<DeezerPlaylist>;
    toJSON(): {
        id: number;
        title: string;
        public: boolean;
        url: string;
        picture: DeezerImage;
        creationDate: Date;
        type: "playlist" | "track" | "album";
        creator: DeezerUser;
        tracksCount: number;
        description: string | undefined;
        durationInSec: number | undefined;
        isLoved: boolean | undefined;
        collaborative: boolean | undefined;
        fans: number | undefined;
        tracks: {
            id: number;
            title: string;
            shortTitle: string;
            url: string;
            durationInSec: number;
            rank: number;
            explicit: boolean;
            previewURL: string;
            artist: DeezerArtist;
            album: DeezerTrackAlbum;
            type: "playlist" | "track" | "album";
            trackPosition: number | undefined;
            diskNumber: number | undefined;
            releaseDate: Date | undefined;
            bpm: number | undefined;
            gain: number | undefined;
            contributors: DeezerArtist[] | undefined;
        }[];
    };
}
declare class DeezerTrackAlbum {
    id: number;
    title: string;
    url: string;
    cover: DeezerImage;
    releaseDate?: Date;
    constructor(data: any);
}
declare class DeezerArtist {
    id: number;
    name: string;
    url: string;
    picture?: DeezerImage;
    role?: string;
    constructor(data: any);
}
export {};
//# sourceMappingURL=classes.d.ts.map