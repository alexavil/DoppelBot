import { SoundCloudPlaylist, SoundCloudTrack, Stream } from './classes';
interface SoundDataOptions {
    client_id: string;
}
/**
 * Function to get info from a soundcloud url
 * @param url soundcloud url
 * @returns SoundCloud Track or SoundCloud Playlist
 */
export declare function soundcloud(url: string): Promise<SoundCloud>;
/**
 * Type of SoundCloud
 */
export declare type SoundCloud = SoundCloudTrack | SoundCloudPlaylist;
/**
 * Function for searching in SoundCloud
 * @param query query to search
 * @param type 'tracks' | 'playlists' | 'albums'
 * @param limit max no. of results
 * @returns Array of SoundCloud type.
 */
export declare function so_search(query: string, type: 'tracks' | 'playlists' | 'albums', limit?: number): Promise<SoundCloud[]>;
/**
 * Main Function for creating a Stream of soundcloud
 * @param url soundcloud url
 * @param quality Quality to select from
 * @returns SoundCloud Stream
 */
export declare function stream(url: string, quality?: number): Promise<Stream>;
/**
 * Function to get Free Client ID of soundcloud.
 * @returns client ID
 */
export declare function getFreeClientID(): Promise<string>;
/**
 * Type for SoundCloud Stream
 */
export declare type SoundCloudStream = Stream;
/**
 * Function for creating a Stream of soundcloud using a SoundCloud Track Class
 * @param data SoundCloud Track Class
 * @param quality Quality to select from
 * @returns SoundCloud Stream
 */
export declare function stream_from_info(data: SoundCloudTrack, quality?: number): Promise<SoundCloudStream>;
/**
 * Function to check client ID
 * @param id Client ID
 * @returns boolean
 */
export declare function check_id(id: string): Promise<boolean>;
/**
 * Function to validate for a soundcloud url
 * @param url soundcloud url
 * @returns "false" | 'track' | 'playlist'
 */
export declare function so_validate(url: string): Promise<false | 'track' | 'playlist' | 'search'>;
export declare function setSoundCloudToken(options: SoundDataOptions): void;
export {};
//# sourceMappingURL=index.d.ts.map