import { ProxyOptions as Proxy } from './../../Request/index';
import { YouTubeVideo } from '../classes/Video';
import { YouTubePlayList } from '../classes/Playlist';
import { InfoData } from '../stream';
interface InfoOptions {
    proxy?: Proxy[];
    htmldata?: boolean;
}
interface PlaylistOptions {
    incomplete?: boolean;
    proxy?: Proxy[];
}
/**
 * Command to validate a YouTube url
 * @param url Url for validation
 * @returns type of url or false.
 */
export declare function yt_validate(url: string): 'playlist' | 'video' | 'search' | false;
/**
 * Function to extract ID of YouTube url.
 * @param url ID or url of YouTube
 * @returns ID of video or playlist.
 */
export declare function extractID(url: string): string;
/**
 * Basic function to get data from a YouTube url or ID.
 * @param url YouTube url or ID
 * @param options cookie and proxy parameters to add
 * @returns Data containing video_details, LiveStreamData and formats of video url.
 */
export declare function video_basic_info(url: string, options?: InfoOptions): Promise<{
    LiveStreamData: {
        isLive: boolean;
        dashManifestUrl: any;
        hlsManifestUrl: any;
    };
    html5player: string;
    format: any[];
    video_details: YouTubeVideo;
    related_videos: string[];
}>;
/**
 * Function which gets data from video_basic_info and deciphers it if it contains signatures.
 * @param url YouTube Video URL
 * @param options cookie and proxy parameters to add
 * @returns Data containing video_details, LiveStreamData and formats of video url.
 */
export declare function video_info(url: string, options?: InfoOptions): Promise<{
    LiveStreamData: {
        isLive: boolean;
        dashManifestUrl: any;
        hlsManifestUrl: any;
    };
    html5player: string;
    format: any[];
    video_details: YouTubeVideo;
    related_videos: string[];
}>;
/**
 * Function uses data from video_basic_info and deciphers it if it contains signatures.
 * @param data basic_video_info data
 * @returns Data containing video_details, LiveStreamData and formats of video url.
 */
export declare function decipher_info(data: InfoData): Promise<InfoData>;
/**
 * Function to get YouTube playlist info from a playlist url.
 * @param url Playlist URL
 * @param options incomplete and proxy to add.
 * @returns YouTube Playlist
 */
export declare function playlist_info(url: string, options?: PlaylistOptions): Promise<YouTubePlayList>;
/**
 * Function to parse Playlist from YouTube search
 * @param data html data of that request
 * @param limit No. of videos to parse
 * @returns Array of YouTubeVideo.
 */
export declare function getPlaylistVideos(data: any, limit?: number): YouTubeVideo[];
/**
 * Function to get Continuation Token
 * @param data html data of playlist url
 * @returns token
 */
export declare function getContinuationToken(data: any): string;
export {};
//# sourceMappingURL=extractor.d.ts.map