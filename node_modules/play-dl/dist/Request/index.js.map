{"version":3,"file":"index.js","sourceRoot":"","sources":["../../play-dl/Request/index.ts"],"names":[],"mappings":"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","sourcesContent":["import http, { ClientRequest, IncomingMessage } from 'node:http';\nimport https, { RequestOptions } from 'node:https';\nimport { URL } from 'node:url';\nimport { cookieHeaders, getCookies } from '../YouTube/utils/cookie';\nimport { Proxy } from './classes';\n\nexport type ProxyOptions = ProxyOpts | string;\n\ninterface RequestOpts extends RequestOptions {\n    body?: string;\n    method?: 'GET' | 'POST' | 'HEAD';\n    proxies?: ProxyOptions[];\n    cookies?: boolean;\n}\n\ninterface ProxyOpts {\n    host: string;\n    port: number;\n    authentication?: {\n        username: string;\n        password: string;\n    };\n}\n/**\n * Main module which play-dl uses to make a request to stream url.\n * @param url URL to make https request to\n * @param options Request options for https request\n * @returns IncomingMessage from the request\n */\nexport function request_stream(req_url: string, options: RequestOpts = { method: 'GET' }): Promise<IncomingMessage> {\n    return new Promise(async (resolve, reject) => {\n        let res = await https_getter(req_url, options).catch((err: Error) => err);\n        if (res instanceof Error) {\n            reject(res);\n            return;\n        }\n        if (Number(res.statusCode) >= 300 && Number(res.statusCode) < 400) {\n            res = await request_stream(res.headers.location as string, options);\n        }\n        resolve(res);\n    });\n}\n/**\n * Main module which play-dl uses to make a proxy or normal request\n * @param url URL to make https request to\n * @param options Request options for https request\n * @returns body of that request\n */\nexport function request(req_url: string, options: RequestOpts = { method: 'GET' }): Promise<string> {\n    return new Promise(async (resolve, reject) => {\n        if (!options?.proxies || options.proxies.length === 0) {\n            let cookies_added = false;\n            if (options.cookies) {\n                let cook = getCookies();\n                if (typeof cook === 'string' && options.headers) {\n                    Object.assign(options.headers, { cookie: cook });\n                    cookies_added = true;\n                }\n            }\n            let res = await https_getter(req_url, options).catch((err: Error) => err);\n            if (res instanceof Error) {\n                reject(res);\n                return;\n            }\n            if (res.headers && res.headers['set-cookie'] && cookies_added) {\n                cookieHeaders(res.headers['set-cookie']);\n            }\n            if (Number(res.statusCode) >= 300 && Number(res.statusCode) < 400) {\n                res = await https_getter(res.headers.location as string, options);\n            } else if (Number(res.statusCode) > 400) {\n                reject(new Error(`Got ${res.statusCode} from the request`));\n            }\n            const data: string[] = [];\n            res.setEncoding('utf-8');\n            res.on('data', (c) => data.push(c));\n            res.on('end', () => resolve(data.join('')));\n        } else {\n            let cookies_added = false;\n            if (options.cookies) {\n                let cook = getCookies();\n                if (typeof cook === 'string' && options.headers) {\n                    Object.assign(options.headers, { cookie: cook });\n                    cookies_added = true;\n                }\n            }\n            let res = await proxy_getter(req_url, options.proxies, options.headers).catch((e: Error) => e);\n            if (res instanceof Error) {\n                reject(res);\n                return;\n            }\n            if (res.headers && (res.headers as any)['set-cookie'] && cookies_added) {\n                cookieHeaders((res.headers as any)['set-cookie']);\n            }\n            if (res.statusCode >= 300 && res.statusCode < 400) {\n                res = await proxy_getter((res.headers as any)['location'], options.proxies, options.headers);\n            } else if (res.statusCode > 400) {\n                reject(new Error(`GOT ${res.statusCode} from proxy request`));\n            }\n            resolve(res.body);\n        }\n    });\n}\n\nexport function request_resolve_redirect(url: string): Promise<string> {\n    return new Promise(async (resolve, reject) => {\n        let res = await https_getter(url, { method: 'HEAD' }).catch((err: Error) => err);\n        if (res instanceof Error) {\n            reject(res);\n            return;\n        }\n        const statusCode = Number(res.statusCode);\n        if (statusCode < 300) {\n            resolve(url);\n        } else if (statusCode < 400) {\n            const resolved = await request_resolve_redirect(res.headers.location as string).catch((err) => err);\n\n            if (res instanceof Error) {\n                reject(res);\n                return;\n            }\n\n            resolve(resolved);\n        } else {\n            reject(new Error(`${res.statusCode}: ${res.statusMessage}, ${url}`));\n        }\n    });\n}\n\n/**\n * Chooses one random number between max and min number.\n * @param min Minimum number\n * @param max Maximum number\n * @returns Random Number\n */\nfunction randomIntFromInterval(min: number, max: number): number {\n    let x = Math.floor(Math.random() * (max - min + 1) + min);\n    if (x === 0) return 0;\n    else return x - 1;\n}\n/**\n * Main module that play-dl uses for proxy.\n * @param req_url URL to make https request to\n * @param req_proxy Proxies array\n * @returns Object with statusCode, head and body\n */\nfunction proxy_getter(req_url: string, req_proxy: ProxyOptions[], headers?: Object): Promise<Proxy> {\n    return new Promise((resolve, reject) => {\n        const proxy: string | ProxyOpts = req_proxy[randomIntFromInterval(0, req_proxy.length)];\n        const parsed_url = new URL(req_url);\n        let opts: ProxyOpts;\n        if (typeof proxy === 'string') {\n            const parsed = new URL(proxy);\n            opts = {\n                host: parsed.hostname,\n                port: Number(parsed.port),\n                authentication: {\n                    username: parsed.username,\n                    password: parsed.password\n                }\n            };\n        } else\n            opts = {\n                host: proxy.host,\n                port: Number(proxy.port)\n            };\n        let req: ClientRequest;\n        if (!opts.authentication) {\n            req = http.request({\n                host: opts.host,\n                port: opts.port,\n                method: 'CONNECT',\n                path: `${parsed_url.host}:443`\n            });\n        } else {\n            req = http.request({\n                host: opts.host,\n                port: opts.port,\n                method: 'CONNECT',\n                path: `${parsed_url.host}:443`,\n                headers: {\n                    'Proxy-Authorization': `Basic ${Buffer.from(\n                        `${opts.authentication?.username}:${opts.authentication?.password}`\n                    ).toString('base64')}`\n                }\n            });\n        }\n        req.on('connect', async function (res, socket) {\n            const conn_proxy = new Proxy(parsed_url, { method: 'GET', socket: socket, headers: headers });\n            await conn_proxy.fetch();\n            socket.end();\n            resolve(conn_proxy);\n        });\n        req.on('error', (e: Error) => reject(e));\n        req.end();\n    });\n}\n\n/**\n * Main module that play-dl uses for making a https request\n * @param req_url URL to make https request to\n * @param options Request options for https request\n * @returns Incoming Message from the https request\n */\nfunction https_getter(req_url: string, options: RequestOpts = {}): Promise<IncomingMessage> {\n    return new Promise((resolve, reject) => {\n        const s = new URL(req_url);\n        options.method ??= 'GET';\n        const req_options: RequestOptions = {\n            host: s.hostname,\n            path: s.pathname + s.search,\n            headers: options.headers ?? {},\n            method: options.method\n        };\n\n        const req = https.request(req_options, resolve);\n        req.on('error', (err) => {\n            reject(err);\n        });\n        if (options.method === 'POST') req.write(options.body);\n        req.end();\n    });\n}\n"]}