{"version":3,"file":"stream.js","sourceRoot":"","sources":["../../play-dl/YouTube/stream.ts"],"names":[],"mappings":"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","sourcesContent":["import { video_info } from '.';\nimport { LiveStreaming, Stream } from './classes/LiveStream';\nimport { ProxyOptions as Proxy } from './../Request';\n\nexport enum StreamType {\n    Arbitrary = 'arbitrary',\n    Raw = 'raw',\n    OggOpus = 'ogg/opus',\n    WebmOpus = 'webm/opus',\n    Opus = 'opus'\n}\n\nexport interface StreamOptions {\n    quality?: number;\n    proxy?: Proxy[];\n    htmldata?: boolean;\n}\n\nexport interface InfoData {\n    LiveStreamData: {\n        isLive: boolean;\n        dashManifestUrl: string;\n        hlsManifestUrl: string;\n    };\n    html5player: string;\n    format: any[];\n    video_details: any;\n}\n/**\n * Command to find audio formats from given format array\n * @param formats Formats to search from\n * @returns Audio Formats array\n */\nexport function parseAudioFormats(formats: any[]) {\n    const result: any[] = [];\n    formats.forEach((format) => {\n        const type = format.mimeType as string;\n        if (type.startsWith('audio')) {\n            format.codec = type.split('codecs=\"')[1].split('\"')[0];\n            format.container = type.split('audio/')[1].split(';')[0];\n            result.push(format);\n        }\n    });\n    return result;\n}\n/**\n * Type for YouTube Stream\n */\nexport type YouTubeStream = Stream | LiveStreaming;\n/**\n * Stream command for YouTube\n * @param url YouTube URL\n * @param options lets you add quality, cookie, proxy support for stream\n * @returns Stream class with type and stream for playing.\n */\nexport async function stream(url: string, options: StreamOptions = {}): Promise<YouTubeStream> {\n    const info = await video_info(url, { proxy: options.proxy, htmldata: options.htmldata });\n    const final: any[] = [];\n    if (\n        info.LiveStreamData.isLive === true &&\n        info.LiveStreamData.hlsManifestUrl !== null &&\n        info.video_details.durationInSec === 0\n    ) {\n        return new LiveStreaming(\n            info.LiveStreamData.dashManifestUrl,\n            info.format[info.format.length - 1].targetDurationSec,\n            info.video_details.url\n        );\n    }\n\n    const audioFormat = parseAudioFormats(info.format);\n    if (typeof options.quality !== 'number') options.quality = audioFormat.length - 1;\n    else if (options.quality <= 0) options.quality = 0;\n    else if (options.quality >= audioFormat.length) options.quality = audioFormat.length - 1;\n    if (audioFormat.length !== 0) final.push(audioFormat[options.quality]);\n    else final.push(info.format[info.format.length - 1]);\n    let type: StreamType =\n        final[0].codec === 'opus' && final[0].container === 'webm' ? StreamType.WebmOpus : StreamType.Arbitrary;\n    return new Stream(\n        final[0].url,\n        type,\n        info.video_details.durationInSec,\n        Number(final[0].contentLength),\n        info.video_details.url,\n        options\n    );\n}\n/**\n * Stream command for YouTube using info from video_info or decipher_info function.\n * @param info video_info data\n * @param options lets you add quality, cookie, proxy support for stream\n * @returns Stream class with type and stream for playing.\n */\nexport async function stream_from_info(info: InfoData, options: StreamOptions = {}): Promise<YouTubeStream> {\n    const final: any[] = [];\n    if (\n        info.LiveStreamData.isLive === true &&\n        info.LiveStreamData.hlsManifestUrl !== null &&\n        info.video_details.durationInSec === 0\n    ) {\n        return new LiveStreaming(\n            info.LiveStreamData.dashManifestUrl,\n            info.format[info.format.length - 1].targetDurationSec,\n            info.video_details.url\n        );\n    }\n\n    const audioFormat = parseAudioFormats(info.format);\n    if (typeof options.quality !== 'number') options.quality = audioFormat.length - 1;\n    else if (options.quality <= 0) options.quality = 0;\n    else if (options.quality >= audioFormat.length) options.quality = audioFormat.length - 1;\n    if (audioFormat.length !== 0) final.push(audioFormat[options.quality]);\n    else final.push(info.format[info.format.length - 1]);\n    let type: StreamType =\n        final[0].codec === 'opus' && final[0].container === 'webm' ? StreamType.WebmOpus : StreamType.Arbitrary;\n    return new Stream(\n        final[0].url,\n        type,\n        info.video_details.durationInSec,\n        Number(final[0].contentLength),\n        info.video_details.url,\n        options\n    );\n}\n"]}