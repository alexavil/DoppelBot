{"version":3,"file":"Channel.js","sourceRoot":"","sources":["../../../play-dl/YouTube/classes/Channel.ts"],"names":[],"mappings":";;;AAKA;;GAEG;AACH,MAAa,cAAc;IAUvB,YAAY,IAAS;QACjB,IAAI,CAAC,IAAI;YAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,IAAI,CAAC,WAAW,CAAC,IAAI,sBAAsB,CAAC,CAAC;QAClG,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;QACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;IAEO,MAAM,CAAC,IAAS;QACpB,IAAI,CAAC,IAAI;YAAE,IAAI,GAAG,EAAE,CAAC;QAErB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC;QACrC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC;QAC1B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC;QAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;QAC5D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC;IAChD,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,OAAO,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE;QACzB,IAAI,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ,IAAI,OAAO,CAAC,IAAI,GAAG,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAC/F,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG;YAAE,OAAO,SAAS,CAAC;QACtC,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,EAAE,KAAK,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC;IACtE,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;IAC3B,CAAC;IAED,MAAM;QACF,OAAO;YACH,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE;YACvB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,IAAI,CAAC,WAAW;SAChC,CAAC;IACN,CAAC;CACJ;AAxDD,wCAwDC","sourcesContent":["export interface ChannelIconInterface {\n    url?: string;\n    width: number;\n    height: number;\n}\n/**\n * Class for YouTube Channel url\n */\nexport class YouTubeChannel {\n    name?: string;\n    verified?: boolean;\n    artist?: boolean;\n    id?: string;\n    type: 'video' | 'playlist' | 'channel';\n    url?: string;\n    icon?: ChannelIconInterface;\n    subscribers?: string;\n\n    constructor(data: any) {\n        if (!data) throw new Error(`Cannot instantiate the ${this.constructor.name} class without data!`);\n        this.type = 'channel';\n        this._patch(data);\n    }\n\n    private _patch(data: any): void {\n        if (!data) data = {};\n\n        this.name = data.name || null;\n        this.verified = !!data.verified || false;\n        this.artist = !!data.artist || false;\n        this.id = data.id || null;\n        this.url = data.url || null;\n        this.icon = data.icon || { url: null, width: 0, height: 0 };\n        this.subscribers = data.subscribers || null;\n    }\n\n    /**\n     * Returns channel icon url\n     * @param {object} options Icon options\n     * @param {number} [options.size=0] Icon size. **Default is 0**\n     */\n    iconURL(options = { size: 0 }): string | undefined {\n        if (typeof options.size !== 'number' || options.size < 0) throw new Error('invalid icon size');\n        if (!this.icon?.url) return undefined;\n        const def = this.icon.url.split('=s')[1].split('-c')[0];\n        return this.icon.url.replace(`=s${def}-c`, `=s${options.size}-c`);\n    }\n\n    toString(): string {\n        return this.name || '';\n    }\n\n    toJSON() {\n        return {\n            name: this.name,\n            verified: this.verified,\n            artist: this.artist,\n            id: this.id,\n            url: this.url,\n            iconURL: this.iconURL(),\n            type: this.type,\n            subscribers: this.subscribers\n        };\n    }\n}\n"]}