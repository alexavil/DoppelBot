import { SpotifyAlbum, SpotifyPlaylist, SpotifyTrack } from './classes';
/**
 * Spotify Data options that are stored in spotify.data file.
 */
export interface SpotifyDataOptions {
    client_id: string;
    client_secret: string;
    redirect_url?: string;
    authorization_code?: string;
    access_token?: string;
    refresh_token?: string;
    token_type?: string;
    expires_in?: number;
    expiry?: number;
    market?: string;
    file?: boolean;
}
/**
 * Function to get Playlist | Album | Track
 * @param url url of spotify from which you want info
 * @returns Spotify type.
 */
export declare function spotify(url: string): Promise<Spotify>;
/**
 * Function to validate Spotify url
 * @param url url for validation
 * @returns type of url or false.
 */
export declare function sp_validate(url: string): 'track' | 'playlist' | 'album' | 'search' | false;
/**
 * Fuction for authorizing for spotify data.
 * @param data Sportify Data options to validate
 * @returns boolean.
 */
export declare function SpotifyAuthorize(data: SpotifyDataOptions, file: boolean): Promise<boolean>;
/**
 * Function to check if authorization token is expired or not.
 * @returns boolean
 */
export declare function is_expired(): boolean;
/**
 * type for Spotify Class
 */
export declare type Spotify = SpotifyAlbum | SpotifyPlaylist | SpotifyTrack;
/**
 * Function for searching songs on Spotify
 * @param query searching query
 * @param type "album" | "playlist" | "track"
 * @param limit max no of results
 * @returns Spotify type.
 */
export declare function sp_search(query: string, type: 'album' | 'playlist' | 'track', limit?: number): Promise<Spotify[]>;
/**
 * Function to refresh Token
 * @returns boolean to check whether token is refreshed or not
 */
export declare function refreshToken(): Promise<boolean>;
export declare function setSpotifyToken(options: SpotifyDataOptions): void;
//# sourceMappingURL=index.d.ts.map