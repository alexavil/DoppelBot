{"version":3,"file":"extractor.js","sourceRoot":"","sources":["../../../play-dl/YouTube/utils/extractor.ts"],"names":[],"mappings":"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","sourcesContent":["import { ProxyOptions as Proxy, request } from './../../Request/index';\nimport { format_decipher } from './cipher';\nimport { YouTubeVideo } from '../classes/Video';\nimport { YouTubePlayList } from '../classes/Playlist';\nimport { InfoData } from '../stream';\n\ninterface InfoOptions {\n    proxy?: Proxy[];\n    htmldata?: boolean;\n}\n\ninterface PlaylistOptions {\n    incomplete?: boolean;\n    proxy?: Proxy[];\n}\n\nconst video_id_pattern = /^[a-zA-Z\\d_-]{11,12}$/;\nconst playlist_id_pattern = /^(PL|UU|LL|RD|OL)[a-zA-Z\\d_-]{16,41}$/;\nconst DEFAULT_API_KEY = 'AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8';\nconst video_pattern =\n    /^((?:https?:)?\\/\\/)?(?:(?:www|m)\\.)?((?:youtube\\.com|youtu.be))(\\/(?:[\\w\\-]+\\?v=|embed\\/|v\\/)?)([\\w\\-]+)(\\S+)?$/;\nconst playlist_pattern =\n    /^((?:https?:)?\\/\\/)?(?:(?:www|m)\\.)?(youtube\\.com)\\/(?:(playlist|watch))(.*)?((\\?|\\&)list=)(PL|UU|LL|RD|OL)[a-zA-Z\\d_-]{16,41}(.*)?$/;\n/**\n * Command to validate a YouTube url\n * @param url Url for validation\n * @returns type of url or false.\n */\nexport function yt_validate(url: string): 'playlist' | 'video' | 'search' | false {\n    if (url.indexOf('list=') === -1) {\n        if (url.startsWith('https')) {\n            if (url.match(video_pattern)) {\n                let id: string;\n                if (url.includes('youtu.be/')) id = url.split('youtu.be/')[1].split(/(\\?|\\/|&)/)[0];\n                else if (url.includes('youtube.com/embed/'))\n                    id = url.split('youtube.com/embed/')[1].split(/(\\?|\\/|&)/)[0];\n                else if (url.includes('youtube.com/shorts/'))\n                    id = url.split('youtube.com/shorts/')[1].split(/(\\?|\\/|&)/)[0];\n                else id = url.split('watch?v=')[1].split(/(\\?|\\/|&)/)[0];\n                if (id.match(video_id_pattern)) return 'video';\n                else return false;\n            } else return false;\n        } else {\n            if (url.match(video_id_pattern)) return 'video';\n            else if (url.match(playlist_id_pattern)) return 'playlist';\n            else return 'search';\n        }\n    } else {\n        if (!url.match(playlist_pattern)) return false;\n        else return 'playlist';\n    }\n}\n/**\n * Function to extract ID of YouTube url.\n * @param url ID or url of YouTube\n * @returns ID of video or playlist.\n */\nexport function extractID(url: string): string {\n    const check = yt_validate(url);\n    if (!check || check === 'search') throw new Error('This is not a YouTube url or videoId or PlaylistID');\n    if (url.startsWith('https')) {\n        if (url.indexOf('list=') === -1) {\n            let video_id: string;\n            if (url.includes('youtu.be/')) video_id = url.split('youtu.be/')[1].split(/(\\?|\\/|&)/)[0];\n            else if (url.includes('youtube.com/embed/'))\n                video_id = url.split('youtube.com/embed/')[1].split(/(\\?|\\/|&)/)[0];\n            else if (url.includes('youtube.com/shorts/'))\n                video_id = url.split('youtube.com/shorts/')[1].split(/(\\?|\\/|&)/)[0];\n            else video_id = url.split('watch?v=')[1].split(/(\\?|\\/|&)/)[0];\n            return video_id;\n        } else {\n            return url.split('list=')[1].split('&')[0];\n        }\n    } else return url;\n}\n/**\n * Basic function to get data from a YouTube url or ID.\n * @param url YouTube url or ID\n * @param options cookie and proxy parameters to add\n * @returns Data containing video_details, LiveStreamData and formats of video url.\n */\nexport async function video_basic_info(url: string, options: InfoOptions = {}) {\n    let body: string;\n    if (options.htmldata) {\n        body = url;\n    } else {\n        if (yt_validate(url) !== 'video') throw new Error('This is not a YouTube Watch URL');\n        const video_id: string = extractID(url);\n        const new_url = `https://www.youtube.com/watch?v=${video_id}&has_verified=1`;\n        body = await request(new_url, {\n            proxies: options.proxy ?? [],\n            headers: { 'accept-language': 'en-US,en-IN;q=0.9,en;q=0.8,hi;q=0.7' },\n            cookies: true\n        });\n    }\n    const player_data = body\n        .split('var ytInitialPlayerResponse = ')?.[1]\n        ?.split(';</script>')[0]\n        .split(/;\\s*(var|const|let)/)[0];\n    if (!player_data) throw new Error('Initial Player Response Data is undefined.');\n    const initial_data = body\n        .split('var ytInitialData = ')?.[1]\n        ?.split(';</script>')[0]\n        .split(/;\\s*(var|const|let)/)[0];\n    if (!initial_data) throw new Error('Initial Response Data is undefined.');\n    const player_response = JSON.parse(player_data);\n    const initial_response = JSON.parse(initial_data);\n    if (player_response.playabilityStatus.status !== 'OK')\n        throw new Error(\n            `While getting info from url\\n${\n                player_response.playabilityStatus.errorScreen.playerErrorMessageRenderer?.reason.simpleText ??\n                player_response.playabilityStatus.errorScreen.playerKavRenderer?.reason.simpleText\n            }`\n        );\n    const badge =\n        initial_response.contents.twoColumnWatchNextResults.results?.results?.contents[1]?.videoSecondaryInfoRenderer\n            ?.owner?.videoOwnerRenderer?.badges &&\n        initial_response.contents.twoColumnWatchNextResults.results?.results?.contents[1]?.videoSecondaryInfoRenderer\n            ?.owner?.videoOwnerRenderer?.badges[0];\n    const html5player = `https://www.youtube.com${body.split('\"jsUrl\":\"')[1].split('\"')[0]}`;\n    const related: string[] = [];\n    initial_response.contents.twoColumnWatchNextResults.secondaryResults.secondaryResults.results.forEach(\n        (res: any) => {\n            if (res.compactVideoRenderer)\n                related.push(`https://www.youtube.com/watch?v=${res.compactVideoRenderer.videoId}`);\n        }\n    );\n    const format = [];\n    const vid = player_response.videoDetails;\n    const microformat = player_response.microformat.playerMicroformatRenderer;\n    const video_details = new YouTubeVideo({\n        id: vid.videoId,\n        url: `https://www.youtube.com/watch?v=${vid.videoId}`,\n        title: vid.title,\n        description: vid.shortDescription,\n        duration: Number(vid.lengthSeconds),\n        duration_raw: parseSeconds(Number(vid.lengthSeconds)),\n        uploadedAt: microformat.publishDate,\n        thumbnail: vid.thumbnail.thumbnails[vid.thumbnail.thumbnails.length - 1],\n        channel: {\n            name: vid.author,\n            id: vid.channelId,\n            url: `https://www.youtube.com/channel/${vid.channelId}`,\n            verified: Boolean(badge?.metadataBadgeRenderer?.style?.toLowerCase().includes('verified')),\n            artist: Boolean(badge?.metadataBadgeRenderer?.style?.toLowerCase().includes('artist'))\n        },\n        views: vid.viewCount,\n        tags: vid.keywords,\n        averageRating: vid.averageRating,\n        live: vid.isLiveContent,\n        private: vid.isPrivate\n    });\n    format.push(...(player_response.streamingData.formats ?? []));\n    format.push(...(player_response.streamingData.adaptiveFormats ?? []));\n    const LiveStreamData = {\n        isLive: video_details.live,\n        dashManifestUrl: player_response.streamingData?.dashManifestUrl ?? null,\n        hlsManifestUrl: player_response.streamingData?.hlsManifestUrl ?? null\n    };\n    return {\n        LiveStreamData,\n        html5player,\n        format,\n        video_details,\n        related_videos: related\n    };\n}\n/**\n * Function to convert seconds to [hour : minutes : seconds] format\n * @param seconds seconds to convert\n * @returns [hour : minutes : seconds] format\n */\nfunction parseSeconds(seconds: number): string {\n    const d = Number(seconds);\n    const h = Math.floor(d / 3600);\n    const m = Math.floor((d % 3600) / 60);\n    const s = Math.floor((d % 3600) % 60);\n\n    const hDisplay = h > 0 ? (h < 10 ? `0${h}` : h) + ':' : '';\n    const mDisplay = m > 0 ? (m < 10 ? `0${m}` : m) + ':' : '00:';\n    const sDisplay = s > 0 ? (s < 10 ? `0${s}` : s) : '00';\n    return hDisplay + mDisplay + sDisplay;\n}\n/**\n * Function which gets data from video_basic_info and deciphers it if it contains signatures.\n * @param url YouTube Video URL\n * @param options cookie and proxy parameters to add\n * @returns Data containing video_details, LiveStreamData and formats of video url.\n */\nexport async function video_info(url: string, options: InfoOptions = {}) {\n    const data = await video_basic_info(url, options);\n    if (data.LiveStreamData.isLive === true && data.LiveStreamData.hlsManifestUrl !== null) {\n        return data;\n    } else if (data.format[0].signatureCipher || data.format[0].cipher) {\n        data.format = await format_decipher(data.format, data.html5player);\n        return data;\n    } else {\n        return data;\n    }\n}\n/**\n * Function uses data from video_basic_info and deciphers it if it contains signatures.\n * @param data basic_video_info data\n * @returns Data containing video_details, LiveStreamData and formats of video url.\n */\nexport async function decipher_info(data: InfoData) {\n    if (data.LiveStreamData.isLive === true && data.LiveStreamData.hlsManifestUrl !== null) {\n        return data;\n    } else if (data.format[0].signatureCipher || data.format[0].cipher) {\n        data.format = await format_decipher(data.format, data.html5player);\n        return data;\n    } else {\n        return data;\n    }\n}\n/**\n * Function to get YouTube playlist info from a playlist url.\n * @param url Playlist URL\n * @param options incomplete and proxy to add.\n * @returns YouTube Playlist\n */\nexport async function playlist_info(url: string, options: PlaylistOptions = {}): Promise<YouTubePlayList> {\n    if (!url || typeof url !== 'string') throw new Error(`Expected playlist url, received ${typeof url}!`);\n    let Playlist_id: string;\n    if (url.startsWith('https')) {\n        if (yt_validate(url) !== 'playlist') throw new Error('This is not a Playlist URL');\n        Playlist_id = extractID(url);\n    } else Playlist_id = url;\n    const new_url = `https://www.youtube.com/playlist?list=${Playlist_id}`;\n\n    const body = await request(new_url, {\n        proxies: options.proxy ?? undefined,\n        headers: { 'accept-language': 'en-US,en-IN;q=0.9,en;q=0.8,hi;q=0.7' }\n    });\n    const response = JSON.parse(body.split('var ytInitialData = ')[1].split(';</script>')[0]);\n    if (response.alerts) {\n        if (response.alerts[0].alertWithButtonRenderer?.type === 'INFO') {\n            if (!options.incomplete)\n                throw new Error(\n                    `While parsing playlist url\\n${response.alerts[0].alertWithButtonRenderer.text.simpleText}`\n                );\n        } else if (response.alerts[0].alertRenderer?.type === 'ERROR')\n            throw new Error(`While parsing playlist url\\n${response.alerts[0].alertRenderer.text.runs[0].text}`);\n        else throw new Error('While parsing playlist url\\nUnknown Playlist Error');\n    }\n\n    const rawJSON = `${body.split('{\"playlistVideoListRenderer\":{\"contents\":')[1].split('}],\"playlistId\"')[0]}}]`;\n    const parsed = JSON.parse(rawJSON);\n    const playlistDetails = JSON.parse(body.split('{\"playlistSidebarRenderer\":')[1].split('}};</script>')[0]).items;\n\n    const API_KEY =\n        body.split('INNERTUBE_API_KEY\":\"')[1]?.split('\"')[0] ??\n        body.split('innertubeApiKey\":\"')[1]?.split('\"')[0] ??\n        DEFAULT_API_KEY;\n    const videos = getPlaylistVideos(parsed, 100);\n\n    const data = playlistDetails[0].playlistSidebarPrimaryInfoRenderer;\n    if (!data.title.runs || !data.title.runs.length) throw new Error('Failed to Parse Playlist info.');\n\n    const author = playlistDetails[1]?.playlistSidebarSecondaryInfoRenderer.videoOwner;\n    const views = data.stats.length === 3 ? data.stats[1].simpleText.replace(/[^0-9]/g, '') : 0;\n    const lastUpdate =\n        data.stats\n            .find((x: any) => 'runs' in x && x['runs'].find((y: any) => y.text.toLowerCase().includes('last update')))\n            ?.runs.pop()?.text ?? null;\n    const videosCount = data.stats[0].runs[0].text.replace(/[^0-9]/g, '') || 0;\n\n    const res = new YouTubePlayList({\n        continuation: {\n            api: API_KEY,\n            token: getContinuationToken(parsed),\n            clientVersion:\n                body.split('\"INNERTUBE_CONTEXT_CLIENT_VERSION\":\"')[1]?.split('\"')[0] ??\n                body.split('\"innertube_context_client_version\":\"')[1]?.split('\"')[0] ??\n                '<some version>'\n        },\n        id: data.title.runs[0].navigationEndpoint.watchEndpoint.playlistId,\n        title: data.title.runs[0].text,\n        videoCount: parseInt(videosCount) || 0,\n        lastUpdate: lastUpdate,\n        views: parseInt(views) || 0,\n        videos: videos,\n        url: `https://www.youtube.com/playlist?list=${data.title.runs[0].navigationEndpoint.watchEndpoint.playlistId}`,\n        link: `https://www.youtube.com${data.title.runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url}`,\n        author: author\n            ? {\n                  name: author.videoOwnerRenderer.title.runs[0].text,\n                  id: author.videoOwnerRenderer.title.runs[0].navigationEndpoint.browseEndpoint.browseId,\n                  url: `https://www.youtube.com${\n                      author.videoOwnerRenderer.navigationEndpoint.commandMetadata.webCommandMetadata.url ||\n                      author.videoOwnerRenderer.navigationEndpoint.browseEndpoint.canonicalBaseUrl\n                  }`,\n                  icon: author.videoOwnerRenderer.thumbnail.thumbnails.length\n                      ? author.videoOwnerRenderer.thumbnail.thumbnails[\n                            author.videoOwnerRenderer.thumbnail.thumbnails.length - 1\n                        ].url\n                      : null\n              }\n            : {},\n        thumbnail: data.thumbnailRenderer.playlistVideoThumbnailRenderer?.thumbnail.thumbnails.length\n            ? data.thumbnailRenderer.playlistVideoThumbnailRenderer.thumbnail.thumbnails[\n                  data.thumbnailRenderer.playlistVideoThumbnailRenderer.thumbnail.thumbnails.length - 1\n              ]\n            : null\n    });\n    return res;\n}\n/**\n * Function to parse Playlist from YouTube search\n * @param data html data of that request\n * @param limit No. of videos to parse\n * @returns Array of YouTubeVideo.\n */\nexport function getPlaylistVideos(data: any, limit = Infinity): YouTubeVideo[] {\n    const videos = [];\n\n    for (let i = 0; i < data.length; i++) {\n        if (limit === videos.length) break;\n        const info = data[i].playlistVideoRenderer;\n        if (!info || !info.shortBylineText) continue;\n\n        videos.push(\n            new YouTubeVideo({\n                id: info.videoId,\n                index: parseInt(info.index?.simpleText) || 0,\n                duration: parseInt(info.lengthSeconds) || 0,\n                duration_raw: info.lengthText?.simpleText ?? '0:00',\n                thumbnail: {\n                    id: info.videoId,\n                    url: info.thumbnail.thumbnails[info.thumbnail.thumbnails.length - 1].url,\n                    height: info.thumbnail.thumbnails[info.thumbnail.thumbnails.length - 1].height,\n                    width: info.thumbnail.thumbnails[info.thumbnail.thumbnails.length - 1].width\n                },\n                title: info.title.runs[0].text,\n                channel: {\n                    id: info.shortBylineText.runs[0].navigationEndpoint.browseEndpoint.browseId || undefined,\n                    name: info.shortBylineText.runs[0].text || undefined,\n                    url: `https://www.youtube.com${\n                        info.shortBylineText.runs[0].navigationEndpoint.browseEndpoint.canonicalBaseUrl ||\n                        info.shortBylineText.runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url\n                    }`,\n                    icon: undefined\n                }\n            })\n        );\n    }\n    return videos;\n}\n/**\n * Function to get Continuation Token\n * @param data html data of playlist url\n * @returns token\n */\nexport function getContinuationToken(data: any): string {\n    return data.find((x: any) => Object.keys(x)[0] === 'continuationItemRenderer')?.continuationItemRenderer\n        .continuationEndpoint?.continuationCommand?.token;\n}\n"]}