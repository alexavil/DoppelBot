{"version":3,"file":"entersState.js","sourceRoot":"","sources":["../../src/util/entersState.ts"],"names":[],"mappings":";;;AAyBA;;;;;;GAMG;AACH,SAAgB,WAAW,CAC1B,MAAS,EACT,MAAiD,EACjD,OAAe;IAEf,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,MAAM,EAAE;QACnC,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KAC/B;IACD,IAAI,OAAmB,CAAC;IACxB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACtC,MAAM,OAAO,GAAG,UAAU,CACzB,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,uBAAuB,MAAgB,WAAW,OAAO,IAAI,CAAC,CAAC,EACtF,OAAO,CACP,CAAC;QAED,MAAc,CAAC,IAAI,CAAC,MAAa,EAAE,OAAO,CAAC,CAAC;QAC5C,MAAc,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAEtC,OAAO,GAAG,GAAG,EAAE;YACd,YAAY,CAAC,OAAO,CAAC,CAAC;YACrB,MAAc,CAAC,GAAG,CAAC,MAAa,EAAE,OAAO,CAAC,CAAC;YAC3C,MAAc,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACtC,CAAC,CAAC;IACH,CAAC,CAAC;SACA,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC;SAClB,OAAO,CAAC,OAAQ,CAAC,CAAC;AACrB,CAAC;AA1BD,kCA0BC","sourcesContent":["import { VoiceConnection, VoiceConnectionStatus } from '../VoiceConnection';\nimport { AudioPlayer, AudioPlayerStatus } from '../audio/AudioPlayer';\n\n/**\n * Allows a voice connection a specified amount of time to enter a given state, otherwise rejects with an error.\n *\n * @param target - The voice connection that we want to observe the state change for\n * @param status - The status that the voice connection should be in\n * @param maxTime - The maximum time we are allowing for this to occur\n */\nexport function entersState(\n\ttarget: VoiceConnection,\n\tstatus: VoiceConnectionStatus,\n\tmaxTime: number,\n): Promise<VoiceConnection>;\n\n/**\n * Allows an audio player a specified amount of time to enter a given state, otherwise rejects with an error.\n *\n * @param target - The audio player that we want to observe the state change for\n * @param status - The status that the audio player should be in\n * @param maxTime - The maximum time we are allowing for this to occur\n */\nexport function entersState(target: AudioPlayer, status: AudioPlayerStatus, maxTime: number): Promise<AudioPlayer>;\n\n/**\n * Allows a target a specified amount of time to enter a given state, otherwise rejects with an error.\n *\n * @param target - The object that we want to observe the state change for\n * @param status - The status that the target should be in\n * @param maxTime - The maximum time we are allowing for this to occur\n */\nexport function entersState<T extends VoiceConnection | AudioPlayer>(\n\ttarget: T,\n\tstatus: VoiceConnectionStatus | AudioPlayerStatus,\n\tmaxTime: number,\n) {\n\tif (target.state.status === status) {\n\t\treturn Promise.resolve(target);\n\t}\n\tlet cleanup: () => void;\n\treturn new Promise((resolve, reject) => {\n\t\tconst timeout = setTimeout(\n\t\t\t() => reject(new Error(`Did not enter state ${status as string} within ${maxTime}ms`)),\n\t\t\tmaxTime,\n\t\t);\n\n\t\t(target as any).once(status as any, resolve);\n\t\t(target as any).once('error', reject);\n\n\t\tcleanup = () => {\n\t\t\tclearTimeout(timeout);\n\t\t\t(target as any).off(status as any, resolve);\n\t\t\t(target as any).off('error', reject);\n\t\t};\n\t})\n\t\t.then(() => target)\n\t\t.finally(cleanup!);\n}\n"]}