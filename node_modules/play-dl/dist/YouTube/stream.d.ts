import { LiveStreaming, Stream } from './classes/LiveStream';
import { ProxyOptions as Proxy } from './../Request';
export declare enum StreamType {
    Arbitrary = "arbitrary",
    Raw = "raw",
    OggOpus = "ogg/opus",
    WebmOpus = "webm/opus",
    Opus = "opus"
}
export interface StreamOptions {
    quality?: number;
    proxy?: Proxy[];
    htmldata?: boolean;
}
export interface InfoData {
    LiveStreamData: {
        isLive: boolean;
        dashManifestUrl: string;
        hlsManifestUrl: string;
    };
    html5player: string;
    format: any[];
    video_details: any;
}
/**
 * Command to find audio formats from given format array
 * @param formats Formats to search from
 * @returns Audio Formats array
 */
export declare function parseAudioFormats(formats: any[]): any[];
/**
 * Type for YouTube Stream
 */
export declare type YouTubeStream = Stream | LiveStreaming;
/**
 * Stream command for YouTube
 * @param url YouTube URL
 * @param options lets you add quality, cookie, proxy support for stream
 * @returns Stream class with type and stream for playing.
 */
export declare function stream(url: string, options?: StreamOptions): Promise<YouTubeStream>;
/**
 * Stream command for YouTube using info from video_info or decipher_info function.
 * @param info video_info data
 * @param options lets you add quality, cookie, proxy support for stream
 * @returns Stream class with type and stream for playing.
 */
export declare function stream_from_info(info: InfoData, options?: StreamOptions): Promise<YouTubeStream>;
//# sourceMappingURL=stream.d.ts.map